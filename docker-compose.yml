version: '3.8'

services:
  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/New_York
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
      # Security
      - N8N_SECURE_COOKIE=false
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_JWT_SECRET:-your-super-secret-jwt-key-change-this}
      # Database
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n_password}
      # Email (for notifications)
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - N8N_SMTP_PORT=${SMTP_PORT:-587}
      - N8N_SMTP_USER=${SMTP_USER:-}
      - N8N_SMTP_PASS=${SMTP_PASS:-}
      - N8N_SMTP_SENDER=${SMTP_SENDER:-noreply@unburden-america.com}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n_pack:/home/node/n8n_pack:ro
    depends_on:
      - postgres
    networks:
      - unburden-net
    labels:
      - "com.docker.compose.service=n8n"

  # PostgreSQL Database for n8n
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n_password}
      - POSTGRES_NON_ROOT_USER=n8n
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_PASSWORD:-n8n_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - unburden-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent API Gateway (FastAPI)
  agent-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - API_V1_STR=/api/v1
      - PROJECT_NAME="Unburden America Agent API"
      - BACKEND_CORS_ORIGINS=["http://localhost:5678", "http://localhost:3000"]
      # Agent Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AGENT_TIMEOUT=120
      - MAX_RETRIES=3
      # Database
      - DATABASE_URL=postgresql://agent_user:${AGENT_DB_PASSWORD:-agent_password}@postgres:5432/agents
      # Security
      - SECRET_KEY=${API_SECRET_KEY:-your-super-secret-api-key-change-this}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
    volumes:
      - ./agents:/app/agents:ro
      - ./prompts:/app/prompts:ro
      - agent_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - unburden-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - unburden-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Content Generation Service
  content-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.content-service
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - AGENT_API_URL=http://agent-api:8000
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - OUTPUT_DIR=/app/output
    volumes:
      - ./ffmpeg_templates:/app/templates:ro
      - content_output:/app/output
      - /tmp:/tmp
    depends_on:
      - redis
      - agent-api
    networks:
      - unburden-net

  # Analytics & Reporting Service
  analytics-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.analytics-service
    restart: unless-stopped
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://analytics_user:${ANALYTICS_DB_PASSWORD:-analytics_password}@postgres:5432/analytics
      - REDIS_URL=redis://redis:6379
      - AGENT_API_URL=http://agent-api:8000
    volumes:
      - analytics_data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - unburden-net

  # Petition & Certificate Service
  petition-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.petition-service
    restart: unless-stopped
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://petition_user:${PETITION_DB_PASSWORD:-petition_password}@postgres:5432/petitions
      - CERTIFICATE_TEMPLATE_PATH=/app/certificate/template.html
      - CERTIFICATE_OUTPUT_DIR=/app/certificates
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./certificate:/app/certificate:ro
      - certificate_output:/app/certificates
    depends_on:
      - postgres
      - redis
    networks:
      - unburden-net

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - n8n
      - agent-api
      - content-service
      - analytics-service
      - petition-service
    networks:
      - unburden-net

  # Monitoring & Health Checks
  healthcheck:
    image: curlimages/curl:latest
    restart: "no"
    command: >
      sh -c "
      echo 'Starting health checks...'
      sleep 30
      curl -f http://n8n:5678/healthz || exit 1
      curl -f http://agent-api:8000/health || exit 1
      curl -f http://content-service:8000/health || exit 1
      curl -f http://analytics-service:8000/health || exit 1
      curl -f http://petition-service:8000/health || exit 1
      echo 'All services healthy!'
      "
    depends_on:
      - n8n
      - agent-api
      - content-service
      - analytics-service
      - petition-service
    networks:
      - unburden-net

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  agent_logs:
    driver: local
  content_output:
    driver: local
  analytics_data:
    driver: local
  certificate_output:
    driver: local
  nginx_logs:
    driver: local

networks:
  unburden-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16